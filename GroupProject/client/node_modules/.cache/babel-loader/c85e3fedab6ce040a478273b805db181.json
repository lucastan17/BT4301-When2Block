{"ast":null,"code":"import { defineComponent } from 'vue';\nimport { getValueByPath, blankIfUndefined, endsWith } from './helpers.mjs';\nimport { getOptions } from './config.mjs';\n\nconst _defaultSuffixProcessor = (input, suffix) => {\n  return blankIfUndefined(input).split(' ').filter(cls => cls.length > 0).map(cls => cls + suffix).join(' ');\n};\n\nconst _getContext = vm => {\n  const computedNames = vm.$options.computed ? Object.keys(vm.$options.computed) : [];\n  const computed = computedNames.filter(e => !endsWith(e, 'Classes')).reduce((o, key) => {\n    o[key] = vm[key];\n    return o;\n  }, {});\n  return {\n    props: vm.$props,\n    data: vm.$data,\n    computed\n  };\n};\n\nvar BaseComponentMixin = defineComponent({\n  isOruga: true,\n  props: {\n    override: Boolean\n  },\n  methods: {\n    computedClass(field, defaultValue, suffix = '') {\n      const config = this.$props.override === true ? {} : getOptions();\n      const override = this.$props.override || getValueByPath(config, `${this.$options.configField}.override`, false);\n      const overrideClass = getValueByPath(config, `${this.$options.configField}.${field}.override`, override);\n      const globalTransformClasses = getValueByPath(config, `transformClasses`, undefined);\n      const localTransformClasses = getValueByPath(config, `${this.$options.configField}.transformClasses`, undefined);\n      let globalClass = getValueByPath(config, `${this.$options.configField}.${field}.class`, '') || getValueByPath(config, `${this.$options.configField}.${field}`, '');\n      let currentClass = getValueByPath(this.$props, field);\n\n      if (Array.isArray(currentClass)) {\n        currentClass = currentClass.join(' ');\n      }\n\n      if (defaultValue.search(\"{*}\") !== -1) {\n        defaultValue = defaultValue.replace(/\\{\\*\\}/g, suffix);\n      } else {\n        defaultValue = defaultValue + suffix;\n      }\n\n      let context = null;\n\n      if (typeof currentClass === \"function\") {\n        context = _getContext(this);\n        currentClass = currentClass(suffix, context);\n      } else {\n        currentClass = _defaultSuffixProcessor(currentClass, suffix);\n      }\n\n      if (typeof globalClass === \"function\") {\n        globalClass = globalClass(suffix, context || _getContext(this));\n      } else {\n        globalClass = _defaultSuffixProcessor(globalClass, suffix);\n      }\n\n      let appliedClasses = (`${override && !overrideClass || !override && !overrideClass ? defaultValue : ''} ` + `${blankIfUndefined(globalClass)} ` + `${blankIfUndefined(currentClass)}`).trim().replace(/\\s\\s+/g, ' ');\n\n      if (localTransformClasses) {\n        appliedClasses = localTransformClasses(appliedClasses);\n      }\n\n      if (globalTransformClasses) {\n        appliedClasses = globalTransformClasses(appliedClasses);\n      }\n\n      return appliedClasses;\n    }\n\n  }\n}); // oruga object for programmatic components\n\nconst oruga = {}; // add components to the oruga object\n\nfunction addProgrammatic(property, component) {\n  oruga[property] = component;\n} // composable for internal and external usage\n\n\nfunction useProgrammatic() {\n  return {\n    oruga,\n    addProgrammatic\n  };\n}\n\nconst registerPlugin = (app, plugin) => {\n  app.use(plugin);\n};\n\nconst registerComponent = (app, component) => {\n  app.component(component.name, component);\n};\n\nconst registerComponentProgrammatic = (app, property, component) => {\n  // use composable for unified access to programmatic oruga object\n  const {\n    oruga,\n    addProgrammatic\n  } = useProgrammatic(); // add component (manipulates the programmatic oruga object)\n\n  addProgrammatic(property, component); // add provide and $oruga (only needed once)\n\n  if (!(app._context.provides && app._context.provides.oruga)) app.provide('oruga', oruga);\n  if (!app.config.globalProperties.$oruga) app.config.globalProperties.$oruga = oruga;\n};\n\nexport { BaseComponentMixin as B, registerComponentProgrammatic as a, registerComponent as b, registerPlugin as r, useProgrammatic as u };","map":{"version":3,"names":["defineComponent","getValueByPath","blankIfUndefined","endsWith","getOptions","_defaultSuffixProcessor","input","suffix","split","filter","cls","length","map","join","_getContext","vm","computedNames","$options","computed","Object","keys","e","reduce","o","key","props","$props","data","$data","BaseComponentMixin","isOruga","override","Boolean","methods","computedClass","field","defaultValue","config","configField","overrideClass","globalTransformClasses","undefined","localTransformClasses","globalClass","currentClass","Array","isArray","search","replace","context","appliedClasses","trim","oruga","addProgrammatic","property","component","useProgrammatic","registerPlugin","app","plugin","use","registerComponent","name","registerComponentProgrammatic","_context","provides","provide","globalProperties","$oruga","B","a","b","r","u"],"sources":["C:/Users/JeeJoo/Documents/GitHub/BT4301-When2Block/GroupProject/client/node_modules/@oruga-ui/oruga-next/dist/esm/plugins-8a0db0e9.mjs"],"sourcesContent":["import { defineComponent } from 'vue';\nimport { getValueByPath, blankIfUndefined, endsWith } from './helpers.mjs';\nimport { getOptions } from './config.mjs';\n\nconst _defaultSuffixProcessor = (input, suffix) => {\r\n    return blankIfUndefined(input)\r\n        .split(' ')\r\n        .filter((cls) => cls.length > 0)\r\n        .map((cls) => cls + suffix)\r\n        .join(' ');\r\n};\r\nconst _getContext = (vm) => {\r\n    const computedNames = vm.$options.computed ? Object.keys(vm.$options.computed) : [];\r\n    const computed = computedNames.filter(e => !endsWith(e, 'Classes')).reduce((o, key) => {\r\n        o[key] = vm[key];\r\n        return o;\r\n    }, {});\r\n    return { props: vm.$props, data: vm.$data, computed };\r\n};\r\nvar BaseComponentMixin = defineComponent({\r\n    isOruga: true,\r\n    props: {\r\n        override: Boolean\r\n    },\r\n    methods: {\r\n        computedClass(field, defaultValue, suffix = '') {\r\n            const config = this.$props.override === true ? {} : getOptions();\r\n            const override = this.$props.override || getValueByPath(config, `${this.$options.configField}.override`, false);\r\n            const overrideClass = getValueByPath(config, `${this.$options.configField}.${field}.override`, override);\r\n            const globalTransformClasses = getValueByPath(config, `transformClasses`, undefined);\r\n            const localTransformClasses = getValueByPath(config, `${this.$options.configField}.transformClasses`, undefined);\r\n            let globalClass = getValueByPath(config, `${this.$options.configField}.${field}.class`, '')\r\n                || getValueByPath(config, `${this.$options.configField}.${field}`, '');\r\n            let currentClass = getValueByPath(this.$props, field);\r\n            if (Array.isArray(currentClass)) {\r\n                currentClass = currentClass.join(' ');\r\n            }\r\n            if (defaultValue.search(\"{*}\") !== -1) {\r\n                defaultValue = defaultValue.replace(/\\{\\*\\}/g, suffix);\r\n            }\r\n            else {\r\n                defaultValue = defaultValue + suffix;\r\n            }\r\n            let context = null;\r\n            if (typeof currentClass === \"function\") {\r\n                context = _getContext(this);\r\n                currentClass = currentClass(suffix, context);\r\n            }\r\n            else {\r\n                currentClass = _defaultSuffixProcessor(currentClass, suffix);\r\n            }\r\n            if (typeof globalClass === \"function\") {\r\n                globalClass = globalClass(suffix, context || _getContext(this));\r\n            }\r\n            else {\r\n                globalClass = _defaultSuffixProcessor(globalClass, suffix);\r\n            }\r\n            let appliedClasses = (`${(override && !overrideClass) || (!override && !overrideClass) ? defaultValue : ''} `\r\n                + `${blankIfUndefined(globalClass)} `\r\n                + `${blankIfUndefined(currentClass)}`).trim().replace(/\\s\\s+/g, ' ');\r\n            if (localTransformClasses) {\r\n                appliedClasses = localTransformClasses(appliedClasses);\r\n            }\r\n            if (globalTransformClasses) {\r\n                appliedClasses = globalTransformClasses(appliedClasses);\r\n            }\r\n            return appliedClasses;\r\n        }\r\n    }\r\n});\n\n// oruga object for programmatic components\r\nconst oruga = {};\r\n// add components to the oruga object\r\nfunction addProgrammatic(property, component) {\r\n    oruga[property] = component;\r\n}\r\n// composable for internal and external usage\r\nfunction useProgrammatic() {\r\n    return { oruga, addProgrammatic };\r\n}\n\nconst registerPlugin = (app, plugin) => {\r\n    app.use(plugin);\r\n};\r\nconst registerComponent = (app, component) => {\r\n    app.component(component.name, component);\r\n};\r\nconst registerComponentProgrammatic = (app, property, component) => {\r\n    // use composable for unified access to programmatic oruga object\r\n    const { oruga, addProgrammatic } = useProgrammatic();\r\n    // add component (manipulates the programmatic oruga object)\r\n    addProgrammatic(property, component);\r\n    // add provide and $oruga (only needed once)\r\n    if (!(app._context.provides && app._context.provides.oruga))\r\n        app.provide('oruga', oruga);\r\n    if (!app.config.globalProperties.$oruga)\r\n        app.config.globalProperties.$oruga = oruga;\r\n};\n\nexport { BaseComponentMixin as B, registerComponentProgrammatic as a, registerComponent as b, registerPlugin as r, useProgrammatic as u };\n"],"mappings":"AAAA,SAASA,eAAT,QAAgC,KAAhC;AACA,SAASC,cAAT,EAAyBC,gBAAzB,EAA2CC,QAA3C,QAA2D,eAA3D;AACA,SAASC,UAAT,QAA2B,cAA3B;;AAEA,MAAMC,uBAAuB,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;EAC/C,OAAOL,gBAAgB,CAACI,KAAD,CAAhB,CACFE,KADE,CACI,GADJ,EAEFC,MAFE,CAEMC,GAAD,IAASA,GAAG,CAACC,MAAJ,GAAa,CAF3B,EAGFC,GAHE,CAGGF,GAAD,IAASA,GAAG,GAAGH,MAHjB,EAIFM,IAJE,CAIG,GAJH,CAAP;AAKH,CAND;;AAOA,MAAMC,WAAW,GAAIC,EAAD,IAAQ;EACxB,MAAMC,aAAa,GAAGD,EAAE,CAACE,QAAH,CAAYC,QAAZ,GAAuBC,MAAM,CAACC,IAAP,CAAYL,EAAE,CAACE,QAAH,CAAYC,QAAxB,CAAvB,GAA2D,EAAjF;EACA,MAAMA,QAAQ,GAAGF,aAAa,CAACP,MAAd,CAAqBY,CAAC,IAAI,CAAClB,QAAQ,CAACkB,CAAD,EAAI,SAAJ,CAAnC,EAAmDC,MAAnD,CAA0D,CAACC,CAAD,EAAIC,GAAJ,KAAY;IACnFD,CAAC,CAACC,GAAD,CAAD,GAAST,EAAE,CAACS,GAAD,CAAX;IACA,OAAOD,CAAP;EACH,CAHgB,EAGd,EAHc,CAAjB;EAIA,OAAO;IAAEE,KAAK,EAAEV,EAAE,CAACW,MAAZ;IAAoBC,IAAI,EAAEZ,EAAE,CAACa,KAA7B;IAAoCV;EAApC,CAAP;AACH,CAPD;;AAQA,IAAIW,kBAAkB,GAAG7B,eAAe,CAAC;EACrC8B,OAAO,EAAE,IAD4B;EAErCL,KAAK,EAAE;IACHM,QAAQ,EAAEC;EADP,CAF8B;EAKrCC,OAAO,EAAE;IACLC,aAAa,CAACC,KAAD,EAAQC,YAAR,EAAsB7B,MAAM,GAAG,EAA/B,EAAmC;MAC5C,MAAM8B,MAAM,GAAG,KAAKX,MAAL,CAAYK,QAAZ,KAAyB,IAAzB,GAAgC,EAAhC,GAAqC3B,UAAU,EAA9D;MACA,MAAM2B,QAAQ,GAAG,KAAKL,MAAL,CAAYK,QAAZ,IAAwB9B,cAAc,CAACoC,MAAD,EAAU,GAAE,KAAKpB,QAAL,CAAcqB,WAAY,WAAtC,EAAkD,KAAlD,CAAvD;MACA,MAAMC,aAAa,GAAGtC,cAAc,CAACoC,MAAD,EAAU,GAAE,KAAKpB,QAAL,CAAcqB,WAAY,IAAGH,KAAM,WAA/C,EAA2DJ,QAA3D,CAApC;MACA,MAAMS,sBAAsB,GAAGvC,cAAc,CAACoC,MAAD,EAAU,kBAAV,EAA6BI,SAA7B,CAA7C;MACA,MAAMC,qBAAqB,GAAGzC,cAAc,CAACoC,MAAD,EAAU,GAAE,KAAKpB,QAAL,CAAcqB,WAAY,mBAAtC,EAA0DG,SAA1D,CAA5C;MACA,IAAIE,WAAW,GAAG1C,cAAc,CAACoC,MAAD,EAAU,GAAE,KAAKpB,QAAL,CAAcqB,WAAY,IAAGH,KAAM,QAA/C,EAAwD,EAAxD,CAAd,IACXlC,cAAc,CAACoC,MAAD,EAAU,GAAE,KAAKpB,QAAL,CAAcqB,WAAY,IAAGH,KAAM,EAA/C,EAAkD,EAAlD,CADrB;MAEA,IAAIS,YAAY,GAAG3C,cAAc,CAAC,KAAKyB,MAAN,EAAcS,KAAd,CAAjC;;MACA,IAAIU,KAAK,CAACC,OAAN,CAAcF,YAAd,CAAJ,EAAiC;QAC7BA,YAAY,GAAGA,YAAY,CAAC/B,IAAb,CAAkB,GAAlB,CAAf;MACH;;MACD,IAAIuB,YAAY,CAACW,MAAb,CAAoB,KAApB,MAA+B,CAAC,CAApC,EAAuC;QACnCX,YAAY,GAAGA,YAAY,CAACY,OAAb,CAAqB,SAArB,EAAgCzC,MAAhC,CAAf;MACH,CAFD,MAGK;QACD6B,YAAY,GAAGA,YAAY,GAAG7B,MAA9B;MACH;;MACD,IAAI0C,OAAO,GAAG,IAAd;;MACA,IAAI,OAAOL,YAAP,KAAwB,UAA5B,EAAwC;QACpCK,OAAO,GAAGnC,WAAW,CAAC,IAAD,CAArB;QACA8B,YAAY,GAAGA,YAAY,CAACrC,MAAD,EAAS0C,OAAT,CAA3B;MACH,CAHD,MAIK;QACDL,YAAY,GAAGvC,uBAAuB,CAACuC,YAAD,EAAerC,MAAf,CAAtC;MACH;;MACD,IAAI,OAAOoC,WAAP,KAAuB,UAA3B,EAAuC;QACnCA,WAAW,GAAGA,WAAW,CAACpC,MAAD,EAAS0C,OAAO,IAAInC,WAAW,CAAC,IAAD,CAA/B,CAAzB;MACH,CAFD,MAGK;QACD6B,WAAW,GAAGtC,uBAAuB,CAACsC,WAAD,EAAcpC,MAAd,CAArC;MACH;;MACD,IAAI2C,cAAc,GAAG,CAAE,GAAGnB,QAAQ,IAAI,CAACQ,aAAd,IAAiC,CAACR,QAAD,IAAa,CAACQ,aAA/C,GAAgEH,YAAhE,GAA+E,EAAG,GAArF,GACf,GAAElC,gBAAgB,CAACyC,WAAD,CAAc,GADjB,GAEf,GAAEzC,gBAAgB,CAAC0C,YAAD,CAAe,EAFnB,EAEsBO,IAFtB,GAE6BH,OAF7B,CAEqC,QAFrC,EAE+C,GAF/C,CAArB;;MAGA,IAAIN,qBAAJ,EAA2B;QACvBQ,cAAc,GAAGR,qBAAqB,CAACQ,cAAD,CAAtC;MACH;;MACD,IAAIV,sBAAJ,EAA4B;QACxBU,cAAc,GAAGV,sBAAsB,CAACU,cAAD,CAAvC;MACH;;MACD,OAAOA,cAAP;IACH;;EA3CI;AAL4B,CAAD,CAAxC,C,CAoDA;;AACA,MAAME,KAAK,GAAG,EAAd,C,CACA;;AACA,SAASC,eAAT,CAAyBC,QAAzB,EAAmCC,SAAnC,EAA8C;EAC1CH,KAAK,CAACE,QAAD,CAAL,GAAkBC,SAAlB;AACH,C,CACD;;;AACA,SAASC,eAAT,GAA2B;EACvB,OAAO;IAAEJ,KAAF;IAASC;EAAT,CAAP;AACH;;AAED,MAAMI,cAAc,GAAG,CAACC,GAAD,EAAMC,MAAN,KAAiB;EACpCD,GAAG,CAACE,GAAJ,CAAQD,MAAR;AACH,CAFD;;AAGA,MAAME,iBAAiB,GAAG,CAACH,GAAD,EAAMH,SAAN,KAAoB;EAC1CG,GAAG,CAACH,SAAJ,CAAcA,SAAS,CAACO,IAAxB,EAA8BP,SAA9B;AACH,CAFD;;AAGA,MAAMQ,6BAA6B,GAAG,CAACL,GAAD,EAAMJ,QAAN,EAAgBC,SAAhB,KAA8B;EAChE;EACA,MAAM;IAAEH,KAAF;IAASC;EAAT,IAA6BG,eAAe,EAAlD,CAFgE,CAGhE;;EACAH,eAAe,CAACC,QAAD,EAAWC,SAAX,CAAf,CAJgE,CAKhE;;EACA,IAAI,EAAEG,GAAG,CAACM,QAAJ,CAAaC,QAAb,IAAyBP,GAAG,CAACM,QAAJ,CAAaC,QAAb,CAAsBb,KAAjD,CAAJ,EACIM,GAAG,CAACQ,OAAJ,CAAY,OAAZ,EAAqBd,KAArB;EACJ,IAAI,CAACM,GAAG,CAACrB,MAAJ,CAAW8B,gBAAX,CAA4BC,MAAjC,EACIV,GAAG,CAACrB,MAAJ,CAAW8B,gBAAX,CAA4BC,MAA5B,GAAqChB,KAArC;AACP,CAVD;;AAYA,SAASvB,kBAAkB,IAAIwC,CAA/B,EAAkCN,6BAA6B,IAAIO,CAAnE,EAAsET,iBAAiB,IAAIU,CAA3F,EAA8Fd,cAAc,IAAIe,CAAhH,EAAmHhB,eAAe,IAAIiB,CAAtI"},"metadata":{},"sourceType":"module"}