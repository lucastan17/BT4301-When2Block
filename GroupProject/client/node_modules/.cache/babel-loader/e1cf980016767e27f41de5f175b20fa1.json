{"ast":null,"code":"import { defineComponent } from 'vue';\nimport { getValueByPath } from './helpers.mjs';\nimport { getOptions } from './config.mjs';\nvar FormElementMixin = defineComponent({\n  inject: {\n    $field: {\n      from: \"$field\",\n      default: false\n    }\n  },\n  emits: ['blur', 'focus'],\n  props: {\n    /**\r\n     * Makes input full width when inside a grouped or addon field\r\n     */\n    expanded: Boolean,\n\n    /**\r\n     * Makes the element rounded\r\n     */\n    rounded: Boolean,\n\n    /**\r\n     * Icon name to be added\r\n     */\n    icon: String,\n\n    /**\r\n     * Icon pack to use\r\n     * @values mdi, fa, fas and any other custom icon pack\r\n     */\n    iconPack: String,\n\n    /** Native options to use in HTML5 validation */\n    autocomplete: String,\n\n    /** Same as native maxlength, plus character counter */\n    maxlength: [Number, String],\n\n    /** Enable html 5 native validation */\n    useHtml5Validation: {\n      type: Boolean,\n      default: () => {\n        return getValueByPath(getOptions(), \"useHtml5Validation\", true);\n      }\n    },\n\n    /** Show status icon using field and variant prop */\n    statusIcon: {\n      type: Boolean,\n      default: () => {\n        return getValueByPath(getOptions(), \"statusIcon\", true);\n      }\n    },\n\n    /**\r\n     * The message which is shown when a validation error occurs\r\n     */\n    validationMessage: String\n  },\n\n  data() {\n    return {\n      isValid: true,\n      isFocused: false,\n      newIconPack: this.iconPack\n    };\n  },\n\n  computed: {\n    parentField() {\n      return this.$field;\n    },\n\n    /**\r\n     * Get the type prop from parent if it's a Field.\r\n     */\n    statusVariant() {\n      if (!this.parentField) return;\n      if (!this.parentField.newVariant) return;\n\n      if (typeof this.parentField.newVariant === \"string\") {\n        return this.parentField.newVariant;\n      } else {\n        for (const key in this.parentField.newVariant) {\n          if (this.parentField.newVariant[key]) {\n            return key;\n          }\n        }\n      }\n    },\n\n    /**\r\n     * Get the message prop from parent if it's a Field.\r\n     */\n    statusMessage() {\n      if (!this.parentField) return;\n      return this.parentField.newMessage || this.parentField.hasMessageSlot;\n    },\n\n    /**\r\n    * Icon name based on the variant.\r\n    */\n    statusVariantIcon() {\n      const statusVariantIcon = getValueByPath(getOptions(), \"statusVariantIcon\", {\n        'success': 'check',\n        'danger': 'alert-circle',\n        'info': 'information',\n        'warning': 'alert'\n      });\n      return statusVariantIcon[this.statusVariant] || '';\n    }\n\n  },\n  methods: {\n    /**\r\n     * Focus method that work dynamically depending on the component.\r\n     */\n    focus() {\n      const el = this.getElement();\n      if (!el) return;\n      this.$nextTick(() => {\n        if (el) el.focus();\n      });\n    },\n\n    onBlur(event) {\n      this.isFocused = false;\n\n      if (this.parentField) {\n        this.parentField.isFocused = false;\n      }\n\n      this.$emit(\"blur\", event);\n      this.checkHtml5Validity();\n    },\n\n    onFocus(event) {\n      this.isFocused = true;\n\n      if (this.parentField) {\n        this.parentField.isFocused = true;\n      }\n\n      this.$emit(\"focus\", event);\n    },\n\n    getElement() {\n      let el = this.$refs[this.$elementRef];\n\n      while (el && el.$elementRef) {\n        el = el.$refs[el.$elementRef];\n      }\n\n      return el;\n    },\n\n    setInvalid() {\n      const variant = \"danger\";\n      const message = this.validationMessage || this.getElement().validationMessage;\n      this.setValidity(variant, message);\n    },\n\n    setValidity(variant, message) {\n      this.$nextTick(() => {\n        if (this.parentField) {\n          // Set type only if not defined\n          if (!this.parentField.variant) {\n            this.parentField.newVariant = variant;\n          } // Set message only if not defined\n\n\n          if (!this.parentField.message) {\n            this.parentField.newMessage = message;\n          }\n        }\n      });\n    },\n\n    /**\r\n     * Check HTML5 validation, set isValid property.\r\n     * If validation fail, send 'danger' type,\r\n     * and error message to parent if it's a Field.\r\n     */\n    checkHtml5Validity() {\n      if (!this.useHtml5Validation) return;\n      const el = this.getElement();\n      if (!el) return;\n\n      if (!el.checkValidity()) {\n        this.setInvalid();\n        this.isValid = false;\n      } else {\n        this.setValidity(null, null);\n        this.isValid = true;\n      }\n\n      return this.isValid;\n    },\n\n    syncFilled(value) {\n      if (this.parentField) {\n        this.parentField.isFilled = !!value;\n      }\n    }\n\n  }\n});\nexport { FormElementMixin as F };","map":{"version":3,"names":["defineComponent","getValueByPath","getOptions","FormElementMixin","inject","$field","from","default","emits","props","expanded","Boolean","rounded","icon","String","iconPack","autocomplete","maxlength","Number","useHtml5Validation","type","statusIcon","validationMessage","data","isValid","isFocused","newIconPack","computed","parentField","statusVariant","newVariant","key","statusMessage","newMessage","hasMessageSlot","statusVariantIcon","methods","focus","el","getElement","$nextTick","onBlur","event","$emit","checkHtml5Validity","onFocus","$refs","$elementRef","setInvalid","variant","message","setValidity","checkValidity","syncFilled","value","isFilled","F"],"sources":["C:/Users/JeeJoo/Documents/GitHub/BT4301-When2Block/GroupProject/client/node_modules/@oruga-ui/oruga-next/dist/esm/FormElementMixin-386fdfd0.mjs"],"sourcesContent":["import { defineComponent } from 'vue';\nimport { getValueByPath } from './helpers.mjs';\nimport { getOptions } from './config.mjs';\n\nvar FormElementMixin = defineComponent({\r\n    inject: {\r\n        $field: { from: \"$field\", default: false }\r\n    },\r\n    emits: ['blur', 'focus'],\r\n    props: {\r\n        /**\r\n         * Makes input full width when inside a grouped or addon field\r\n         */\r\n        expanded: Boolean,\r\n        /**\r\n         * Makes the element rounded\r\n         */\r\n        rounded: Boolean,\r\n        /**\r\n         * Icon name to be added\r\n         */\r\n        icon: String,\r\n        /**\r\n         * Icon pack to use\r\n         * @values mdi, fa, fas and any other custom icon pack\r\n         */\r\n        iconPack: String,\r\n        /** Native options to use in HTML5 validation */\r\n        autocomplete: String,\r\n        /** Same as native maxlength, plus character counter */\r\n        maxlength: [Number, String],\r\n        /** Enable html 5 native validation */\r\n        useHtml5Validation: {\r\n            type: Boolean,\r\n            default: () => {\r\n                return getValueByPath(getOptions(), \"useHtml5Validation\", true);\r\n            },\r\n        },\r\n        /** Show status icon using field and variant prop */\r\n        statusIcon: {\r\n            type: Boolean,\r\n            default: () => {\r\n                return getValueByPath(getOptions(), \"statusIcon\", true);\r\n            },\r\n        },\r\n        /**\r\n         * The message which is shown when a validation error occurs\r\n         */\r\n        validationMessage: String,\r\n    },\r\n    data() {\r\n        return {\r\n            isValid: true,\r\n            isFocused: false,\r\n            newIconPack: this.iconPack,\r\n        };\r\n    },\r\n    computed: {\r\n        parentField() {\r\n            return this.$field;\r\n        },\r\n        /**\r\n         * Get the type prop from parent if it's a Field.\r\n         */\r\n        statusVariant() {\r\n            if (!this.parentField)\r\n                return;\r\n            if (!this.parentField.newVariant)\r\n                return;\r\n            if (typeof this.parentField.newVariant === \"string\") {\r\n                return this.parentField.newVariant;\r\n            }\r\n            else {\r\n                for (const key in this.parentField.newVariant) {\r\n                    if (this.parentField.newVariant[key]) {\r\n                        return key;\r\n                    }\r\n                }\r\n            }\r\n        },\r\n        /**\r\n         * Get the message prop from parent if it's a Field.\r\n         */\r\n        statusMessage() {\r\n            if (!this.parentField)\r\n                return;\r\n            return this.parentField.newMessage || this.parentField.hasMessageSlot;\r\n        },\r\n        /**\r\n        * Icon name based on the variant.\r\n        */\r\n        statusVariantIcon() {\r\n            const statusVariantIcon = getValueByPath(getOptions(), \"statusVariantIcon\", {\r\n                'success': 'check',\r\n                'danger': 'alert-circle',\r\n                'info': 'information',\r\n                'warning': 'alert'\r\n            });\r\n            return statusVariantIcon[this.statusVariant] || '';\r\n        }\r\n    },\r\n    methods: {\r\n        /**\r\n         * Focus method that work dynamically depending on the component.\r\n         */\r\n        focus() {\r\n            const el = this.getElement();\r\n            if (!el)\r\n                return;\r\n            this.$nextTick(() => {\r\n                if (el)\r\n                    el.focus();\r\n            });\r\n        },\r\n        onBlur(event) {\r\n            this.isFocused = false;\r\n            if (this.parentField) {\r\n                this.parentField.isFocused = false;\r\n            }\r\n            this.$emit(\"blur\", event);\r\n            this.checkHtml5Validity();\r\n        },\r\n        onFocus(event) {\r\n            this.isFocused = true;\r\n            if (this.parentField) {\r\n                this.parentField.isFocused = true;\r\n            }\r\n            this.$emit(\"focus\", event);\r\n        },\r\n        getElement() {\r\n            let el = this.$refs[this.$elementRef];\r\n            while (el && el.$elementRef) {\r\n                el = el.$refs[el.$elementRef];\r\n            }\r\n            return el;\r\n        },\r\n        setInvalid() {\r\n            const variant = \"danger\";\r\n            const message = this.validationMessage || this.getElement().validationMessage;\r\n            this.setValidity(variant, message);\r\n        },\r\n        setValidity(variant, message) {\r\n            this.$nextTick(() => {\r\n                if (this.parentField) {\r\n                    // Set type only if not defined\r\n                    if (!this.parentField.variant) {\r\n                        this.parentField.newVariant = variant;\r\n                    }\r\n                    // Set message only if not defined\r\n                    if (!this.parentField.message) {\r\n                        this.parentField.newMessage = message;\r\n                    }\r\n                }\r\n            });\r\n        },\r\n        /**\r\n         * Check HTML5 validation, set isValid property.\r\n         * If validation fail, send 'danger' type,\r\n         * and error message to parent if it's a Field.\r\n         */\r\n        checkHtml5Validity() {\r\n            if (!this.useHtml5Validation)\r\n                return;\r\n            const el = this.getElement();\r\n            if (!el)\r\n                return;\r\n            if (!el.checkValidity()) {\r\n                this.setInvalid();\r\n                this.isValid = false;\r\n            }\r\n            else {\r\n                this.setValidity(null, null);\r\n                this.isValid = true;\r\n            }\r\n            return this.isValid;\r\n        },\r\n        syncFilled(value) {\r\n            if (this.parentField) {\r\n                this.parentField.isFilled = !!value;\r\n            }\r\n        }\r\n    }\r\n});\n\nexport { FormElementMixin as F };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}